MyLanguage - Syntax in BNF Notation

BNF (Backus Naur Form).

MyLanguage-program: 
   program identifier '()' block


program-heading:  
   ( identifier-list ) 


identifier-list: 
   identifier  
   identifier-list , identifier  

class-block:
   class-block-one
   class-block class-block-one

class-block-one:
   type-declaration
   proc-and-func-declaration
   variable-declarations


block:  
   block1  
   type-declaration ; block1 


block1:  
   block2  
   proc-and-func-declaration ; block2


block2:
   'is' variable-declarations 'begin' statement-list 'end'  


type-declaration:
   'type' identifier 'is' typename


variable-declarations:
   variable-declaration
   variable-declarations variable-declaration


variable-declaration:  
   var variableid-list is typename  


variableid-list:  
   identifier  
   variableid-list ,  identifier  


constant:  
   integer  
/*   
   real 
   string
   constid  
   + constid 
   TADD- constid 
 */

typename:
   'integer'
   typeid


type:  
   'array of' integer typename
   'class' class-block
   'class extends' identifier class-block


proc-and-func-declaration:  
   proc-or-func  
   proc-and-func-declaration ; proc-or-func 


proc-or-func:  
   'function'  identifier '(' parameterid-list ')' return-list block 

return-list:
   variable-declarations 'return' 'integer'
   variable-declarations

parameterid-list:
   parameterid
   parameterid-list parameterid


parameterid:
   identifier

statement-list:  
   statement  
   statement-list ; statement  


statement:  
   empty  
   variable ':=' expression  
   'begin' statement-list 'end'  
   'if' expression 'then' statement ('elif' expression 'then' statement)* ('else' statement)? 'endif'
   'while' expression 'do' statement  'endwhile'
   'repeat' statement-list 'until' expression  
   'foreach' varid 'in' variable 'do' statement 'endforeach'
   funcid '(' expression-list ')'


variable:  
   identifier  
   variable [ subscript-list ]  
   variable . fieldid 
   variable ^  


subscript-list:  
   expression  
   subscript-list , expression  


/*for-list:  
   expression to expression  
   expression downto expression  */


expression-list:  
   expression  
   expression-list , expression  


record-variable-list:  
   variable  
   record-variable-list , variable  


expression: 
   expression relational-op additive-expression 
   additive-expression  


relational-op: one of 
   <  <=  =  <>  =>  > 


additive-expression: 
   additive-expression additive-op multiplicative-expression 
   multiplicative-expression  


additive-op: one of 
   +  -  or 


multiplicative-expression: 
   multiplicative-expression multiplicative-op unary-expression 
   unary-expression  


multiplicative-op: one of 
   *  /  div  mod  and  in 


unary-expression: 
   unary-op unary-expression  
   primary-expression  


unary-op:  one of 
   +  -  not 


primary-expression:  
   variable  
   integer
   funcid ( expression-list )  
   [ element-list ]  
   ( expression )  


element-list:  
   empty  
   element  
   element-list , element  


element:  
   expression  
   expression ... expression  


constid:  
   identifier  


typeid:  
   identifier  


funcid: 
   identifier  


procid:  
   identifier  


fieldid:  
   identifier   

  
varid: 
   identifier  


empty: 
